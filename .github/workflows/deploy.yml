name: 🚀 Deploy to Production

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: ⎔ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "yarn"

      - name: 📦 Install dependencies
        run: yarn install

      - name: Build application
        run: yarn build

      - name: 📦 Package for deployment
        run: |
          tar -czf deploy.tar.gz .next public package.json yarn.lock
          ls -la *.tar.gz

      - name: 📤 Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-package
          path: deploy.tar.gz
          retention-days: 1

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 15  # ⚠️ Timeout global de 15 minutos

    steps:
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-package
          path: .  # ⚠️ Descargar en directorio actual

      - name: 🚀 Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 600s  # ⚠️ CORRECTO: 600 segundos (10 minutos) con unidad 's'
          script: |
            echo "📍 Iniciando deploy en el servidor..."
            
            # Verificar que el archivo existe
            ls -la *.tar.gz || echo "❌ No se encontró deploy.tar.gz"
            
            # Crear directorio si no existe
            mkdir -p /var/www/ci-cd-calculator
            cd /var/www/ci-cd-calculator
            
            # Extraer los nuevos archivos
            echo "📦 Extrayendo archivos..."
            tar -xzf ../deploy.tar.gz -C .
            rm ../deploy.tar.gz
            
            # Instalar dependencias COMPLETAS (no --production)
            echo "🔧 Instalando dependencias..."
            yarn install  # ⚠️ IMPORTANTE: Sin --production para incluir TypeScript
            
            # Construir aplicación
            yarn build
            
            # Detener instancias previas
            pm2 delete ci-cd-calculator 2>/dev/null || true
            pkill -f "node.*3000" 2>/dev/null || true
            sleep 2
            
            # Iniciar la aplicación con PM2 escuchando en todas las interfaces
            echo "🎯 Iniciando aplicación..."
            HOST=0.0.0.0 pm2 start yarn --name "ci-cd-calculator" -- start --port=3000
            pm2 save
            
            echo "✅ ¡Deploy completado exitosamente!"
            echo "🌐 Tu app estará disponible en: http://167.99.182.242:3000"